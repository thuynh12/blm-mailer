{"version":3,"sources":["components/EmailSelector.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","FormControl","margin","spacing","formWrapper","padding","selectEmpty","marginTop","select","borderColor","palette","secondary","main","color","selectLabel","menuItem","displayMessage","messageWrapper","EmailSelector","classes","useState","subjectNum","setSubjectNum","subject","setSubject","message","setMessage","renderStatus","setRenderStatus","sample","DisplayMessage","Typography","variant","style","className","useEffect","htmlEmail","raw","replace","sub","address","email","window","location","href","ExecuteOpenMailer","Fragment","fullWidth","InputLabel","focused","Select","labelId","id","value","onChange","event","target","MenuItem","Container","customTheme","createMuiTheme","primary","responsiveFontSizes","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.63d024d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    MenuItem,\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    FormControl: {\r\n        margin: theme.spacing(1),\r\n        // minWidth: 400,\r\n    },\r\n    formWrapper: {\r\n        padding: theme.spacing(5, 0, 5)\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    select: {\r\n        '&:before': {\r\n            borderColor: theme.palette.secondary.main\r\n        },\r\n        '&:after': {\r\n            borderColor: theme.palette.secondary.main\r\n        },\r\n        color: 'white'\r\n    },\r\n    selectLabel: {\r\n        color: 'white'\r\n    },\r\n    menuItem: {\r\n        color: theme.palette.secondary.main\r\n    },\r\n    displayMessage: {\r\n        padding: theme.spacing(10, 5, 10)\r\n    },\r\n    messageWrapper: {\r\n        padding: theme.spacing(5, 0, 5)\r\n    }\r\n}))\r\n\r\nexport default function EmailSelector() {\r\n    const classes = useStyles();\r\n    // TODO change to default\r\n    const [subjectNum, setSubjectNum] = useState('');\r\n    const [subject, setSubject] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [renderStatus, setRenderStatus] = useState(false);\r\n\r\n\r\n    \r\n    // TODO find auto way to break new line\r\n    // ! cannot exceeds email limit of 2083 characters\r\n    var sample = [\r\n        {\r\n            'email': 'tbwine@louisvilleprosecutor.com',\r\n            'sub': 'Justice for the Murder of Breonna Taylor',\r\n            'message': 'Hello, My name is [insert name]. I am a resident of [Washington/City] and I am emailing today to demand accountability for the racist murder of Breonna Taylor. I demand that charges be pressed against all officers involved in this heinous killing, including Sgt. Jonathan Mattingly and officers Brett Hankison and Myles Cosgrove. They should all be fired, and should be charged and prosecuted to the fullest extent of the law for murder. Breonna Taylor was an ER technician, working tirelessly to help others during this global pandemic. She should be alive today. She would be alive today if it were not for the gross abuse of power and white supremacy exhibited by the Louisville Police Department. All officers involved must face consequences for this murder in order to provide her family with justice and to deter law enforcement from committing racist and brutal acts of violence against communities of color. In addition, I demand that we provide more support for community efforts and organizations that work to prevent police brutality and violence. Sincerely, [your name]',\r\n            'raw': 'Hello,%0DMy name is [insert name]. I am a resident of [Washington/City] and I am emailing today to demand accountability for the racist murder of Breonna Taylor.%0DI demand that charges be pressed against all officers involved in this heinous killing, including Sgt. Jonathan Mattingly and officers Brett Hankison and Myles Cosgrove. They should all be fired, and should be charged and prosecuted to the fullest extent of the law for murder.%0DBreonna Taylor was an ER technician, working tirelessly to help others during this global pandemic. She should be alive today. She would be alive today if it were not for the gross abuse of power and white supremacy exhibited by the Louisville Police Department. All officers involved must face consequences for this murder in order to provide her family with justice and to deter law enforcement from committing racist and brutal acts of violence against communities of color.%0DIn addition, I demand that we provide more support for community efforts and organizations that work to prevent police brutality and violence. Sincerely, [your name]',\r\n        },\r\n        {\r\n            'email': 'opa@seattle.gov',\r\n            'sub': 'Jared Campbell Must Face Consequences',\r\n            'message': 'Hello, My name is [your name] and I am a resident of [city], WA. On Saturday May 30th at the Seattle protest, a young girl was pepper sprayed by one of your officers, Jared Campbell. It was recorded on video and currently is going viral. His badge number is 8470, which he has covered up during the protest. I am demanding that you look into his use of excessive force against a child. Regards,',\r\n            'raw': 'Hello,%0D%0DMy name is [your name] and I am a resident of [city], WA. On Saturday May 30th at the Seattle protest, a young girl was pepper sprayed by one of your officers, Jared Campbell. It was recorded on video and currently is going viral. His badge number is 8470, which he has covered up during the protest. I am demanding that you look into his use of excessive force against a child.%0D%0DRegards,%0D[your name]'\r\n        }\r\n    ]\r\n\r\n    // TODO Remove console.log\r\n    const handleChange = (event) => {\r\n        // console.log('event.target.value : ', event.target.value);\r\n        // console.log('BEFORE SUBJECT NUM : ', subjectNum);\r\n        // console.log('BEFORE SUBJECT : ', subject);\r\n        // console.log('BEFORE MESSAGE : ', message);\r\n\r\n        setSubjectNum(event.target.value);\r\n        setSubject(sample[event.target.value].sub);\r\n        setMessage(sample[event.target.value].message);\r\n        // setRaw(sample[event.target.value].raw);\r\n        setRenderStatus(true);\r\n\r\n        // console.log('------------------------')\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(\"UPDATED SUBJECT : \", subject);\r\n        // console.log(\"UPDATED MESSAGE : \", message);\r\n        ExecuteOpenMailer();\r\n    })\r\n\r\n    function DisplayMessage() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                        Subject: <span style={{ color: 'white' }}>{subject}</span>\r\n                    </Typography>\r\n                </div>\r\n                <div className={classes.messageWrapper}>\r\n                    <Typography variant=\"body1\" color=\"primary\">\r\n                        {message}\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function ParseMessage() {\r\n        // let starter = sample[1].raw;\r\n        let starter = sample[subjectNum].raw;\r\n        // console.log(starter);\r\n        let parsed = starter.replace(/ /g, '%20');\r\n        // console.log(parsed)\r\n        return parsed;\r\n    }\r\n\r\n    function ParseSubject() {\r\n        let starter = sample[subjectNum].sub;\r\n        let parsed = starter.replace(/ /g, '%20');\r\n        return parsed;\r\n    }\r\n\r\n    function ExecuteOpenMailer() {\r\n        if (subjectNum !== '') {\r\n            let htmlEmail = ParseMessage();\r\n            let sub = ParseSubject();\r\n            let address = sample[subjectNum].email;\r\n            window.location.href = \"mailto:\" + address + \"?subject=\" + sub + \"&body=\" + htmlEmail;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.formWrapper}>\r\n                <Typography variant=\"h3\" color=\"secondary\">\r\n                    Select an email to send:\r\n                </Typography>\r\n            </div>\r\n            <FormControl\r\n                className={classes.FormControl}\r\n                color=\"primary\"\r\n                fullWidth={true}\r\n            >\r\n                <InputLabel\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    focused={true}\r\n                >\r\n                    Select Subject\r\n                </InputLabel>\r\n                <Select\r\n                    variant=\"standard\"\r\n                    labelId=\"subject-select-label\"\r\n                    id=\"subject-select\"\r\n                    value={subjectNum}\r\n                    onChange={handleChange}\r\n                    className={classes.select}\r\n                >\r\n                    <MenuItem value={0}>THE MURDER OF BREONNA TAYLOR</MenuItem>\r\n                    <MenuItem value={1}>CONDEMNING JARED CAMPBELL</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <Container className={classes.displayMessage}>\r\n                {\r\n                    renderStatus ? <DisplayMessage /> : null\r\n                }\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport EmailSelector from './components/EmailSelector';\r\n\r\n\r\n\r\nlet customTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#ffffff'\r\n    },\r\n    secondary: {\r\n      main: '#FBEE1F' \r\n    }\r\n  }\r\n  \r\n})\r\n\r\ncustomTheme = responsiveFontSizes(customTheme);\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={customTheme}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"App-padding\">\r\n            {/* // TODO Create Splashscreen  */}\r\n            <Container>\r\n              <Typography variant=\"h1\">\r\n                <strong>\r\n                  NO JUSTICE. NO PEACE.\r\n                </strong>\r\n              </Typography>\r\n              <hr />\r\n              <Typography variant=\"h1\">\r\n                <strong>\r\n                  BLACK LIVES MATTER\r\n                </strong>\r\n              </Typography>\r\n            </Container>\r\n            <EmailSelector />\r\n            {/* <ParseMessage /> */}\r\n          </div>\r\n        </header>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}